# frozen_string_literal: true

Bidi2pdfRails.configure do |config|
<%
    Bidi2pdfRails::Config::CONFIG_OPTIONS.each_pair do |top_level_option_name, top_level_option|
      name = top_level_option[:name]
%>

  #
  # <%= name %>
  #
  <% top_level_option[:options].each do |option| %>
  <% if option[:limited_to] %>
  <%= "# Allowed values: #{option[:limited_to].map { |v| v.inspect }.join(", ")}" %>
  <% end -%>
<% if changed_by_user?(top_level_option_name, option[:name]) -%>
<%= "config.#{top_level_option_name}.#{option[:name]} = #{get_option_value(top_level_option_name, option[:name]) } # #{option[:desc]}" -%>
<% else -%>
<%= "# config.#{top_level_option_name}.#{option[:name]} = #{option[:default_as_str] ? option[:default_as_str] : option[:default].inspect} # #{option[:desc]}" -%>
<% end -%>
  <% end -%>
<% end %>

  # Values can be used from the environment or from the config file.
  # with the following pattern:
  # overrides = Rails.application.config.x.bidi2pdf_rails
  # config.general_options.verbosity = overrides.verbosity if overrides.verbosity
end

Rails.application.config.after_initialize do |_app|
  Bidi2pdfRails::MainLogSubscriber.attach_to "bidi2pdf", inherit_all: true # needed for imported methods
  Bidi2pdfRails::MainLogSubscriber.attach_to "bidi2pdf_rails", inherit_all: true # needed for imported methods

  Bidi2pdfRails::BrowserConsoleLogSubscriber.attach_to "bidi2pdf"

  Bidi2pdfRails::MainLogSubscriber.silence /network_event_.*\.bidi2pdf/

  Bidi2pdfRails::NetworkLogSubscriber.attach_to "bidi2pdf"
end

# If you are using importmaps and you want to render views directly as PDFs, you need to
# patch the importmap tags helper to use the correct caching key
# Importmap::ImportmapTagsHelper.prepend Bidi2pdfRails::Services::ImportmapTagsHelperOverride
